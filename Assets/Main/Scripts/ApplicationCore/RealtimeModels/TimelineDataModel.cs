using Normal.Realtime;
using Normal.Realtime.Serialization;

namespace Main.Scripts.ApplicationCore.RealtimeModels
{
    [RealtimeModel]
    public partial class TimelineDataModel
    {
        [RealtimeProperty(1, true)] private double _startTime;
        [RealtimeProperty(2, true)] private bool _isPlaying;
    }
}

/* ----- Begin Normal Autogenerated Code ----- */
namespace Main.Scripts.ApplicationCore.RealtimeModels {
    public partial class TimelineDataModel : RealtimeModel {
        public double startTime {
            get {
                return _startTimeProperty.value;
            }
            set {
                if (_startTimeProperty.value == value) return;
                _startTimeProperty.value = value;
                InvalidateReliableLength();
            }
        }
        
        public bool isPlaying {
            get {
                return _isPlayingProperty.value;
            }
            set {
                if (_isPlayingProperty.value == value) return;
                _isPlayingProperty.value = value;
                InvalidateReliableLength();
            }
        }
        
        public enum PropertyID : uint {
            StartTime = 1,
            IsPlaying = 2,
        }
        
        #region Properties
        
        private ReliableProperty<double> _startTimeProperty;
        
        private ReliableProperty<bool> _isPlayingProperty;
        
        #endregion
        
        public TimelineDataModel() : base(null) {
            _startTimeProperty = new ReliableProperty<double>(1, _startTime);
            _isPlayingProperty = new ReliableProperty<bool>(2, _isPlaying);
        }
        
        protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
            _startTimeProperty.UnsubscribeCallback();
            _isPlayingProperty.UnsubscribeCallback();
        }
        
        protected override int WriteLength(StreamContext context) {
            var length = 0;
            length += _startTimeProperty.WriteLength(context);
            length += _isPlayingProperty.WriteLength(context);
            return length;
        }
        
        protected override void Write(WriteStream stream, StreamContext context) {
            var writes = false;
            writes |= _startTimeProperty.Write(stream, context);
            writes |= _isPlayingProperty.Write(stream, context);
            if (writes) InvalidateContextLength(context);
        }
        
        protected override void Read(ReadStream stream, StreamContext context) {
            var anyPropertiesChanged = false;
            while (stream.ReadNextPropertyID(out uint propertyID)) {
                var changed = false;
                switch (propertyID) {
                    case (uint) PropertyID.StartTime: {
                        changed = _startTimeProperty.Read(stream, context);
                        break;
                    }
                    case (uint) PropertyID.IsPlaying: {
                        changed = _isPlayingProperty.Read(stream, context);
                        break;
                    }
                    default: {
                        stream.SkipProperty();
                        break;
                    }
                }
                anyPropertiesChanged |= changed;
            }
            if (anyPropertiesChanged) {
                UpdateBackingFields();
            }
        }
        
        private void UpdateBackingFields() {
            _startTime = startTime;
            _isPlaying = isPlaying;
        }
        
    }
}
/* ----- End Normal Autogenerated Code ----- */
