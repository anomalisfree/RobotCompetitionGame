using Normal.Realtime;
using Normal.Realtime.Serialization;

namespace Main.Scripts.ApplicationCore.RealtimeModels
{
    [RealtimeModel]
    public partial class PlayerDataModel
    {
        [RealtimeProperty(1, true )] private string _name;
        [RealtimeProperty(2, true )] private int _colorNum;
    }
}

/* ----- Begin Normal Autogenerated Code ----- */
namespace Main.Scripts.ApplicationCore.RealtimeModels {
    public partial class PlayerDataModel : RealtimeModel {
        public string name {
            get {
                return _nameProperty.value;
            }
            set {
                if (_nameProperty.value == value) return;
                _nameProperty.value = value;
                InvalidateReliableLength();
            }
        }
        
        public int colorNum {
            get {
                return _colorNumProperty.value;
            }
            set {
                if (_colorNumProperty.value == value) return;
                _colorNumProperty.value = value;
                InvalidateReliableLength();
            }
        }
        
        public enum PropertyID : uint {
            Name = 1,
            ColorNum = 2,
        }
        
        #region Properties
        
        private ReliableProperty<string> _nameProperty;
        
        private ReliableProperty<int> _colorNumProperty;
        
        #endregion
        
        public PlayerDataModel() : base(null) {
            _nameProperty = new ReliableProperty<string>(1, _name);
            _colorNumProperty = new ReliableProperty<int>(2, _colorNum);
        }
        
        protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
            _nameProperty.UnsubscribeCallback();
            _colorNumProperty.UnsubscribeCallback();
        }
        
        protected override int WriteLength(StreamContext context) {
            var length = 0;
            length += _nameProperty.WriteLength(context);
            length += _colorNumProperty.WriteLength(context);
            return length;
        }
        
        protected override void Write(WriteStream stream, StreamContext context) {
            var writes = false;
            writes |= _nameProperty.Write(stream, context);
            writes |= _colorNumProperty.Write(stream, context);
            if (writes) InvalidateContextLength(context);
        }
        
        protected override void Read(ReadStream stream, StreamContext context) {
            var anyPropertiesChanged = false;
            while (stream.ReadNextPropertyID(out uint propertyID)) {
                var changed = false;
                switch (propertyID) {
                    case (uint) PropertyID.Name: {
                        changed = _nameProperty.Read(stream, context);
                        break;
                    }
                    case (uint) PropertyID.ColorNum: {
                        changed = _colorNumProperty.Read(stream, context);
                        break;
                    }
                    default: {
                        stream.SkipProperty();
                        break;
                    }
                }
                anyPropertiesChanged |= changed;
            }
            if (anyPropertiesChanged) {
                UpdateBackingFields();
            }
        }
        
        private void UpdateBackingFields() {
            _name = name;
            _colorNum = colorNum;
        }
        
    }
}
/* ----- End Normal Autogenerated Code ----- */
